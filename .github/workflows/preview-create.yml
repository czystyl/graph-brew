name: Create Preview Environment

on:
  pull_request:

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

permissions:
  pull-requests: write
  issues: write

jobs:
  generate-preview-url:
    name: Generate preview URL
    runs-on: ubuntu-latest
    outputs:
      preview-hash: ${{ steps.generate-preview-url.outputs.preview-sha }}
    steps:
      - name: Generate Branch Preview URL
        id: generate-preview-url
        run: |
          BRANCH_SHA=$(echo ${{ steps.extract_branch.outputs.branch }} | sha256sum | cut -c5-38)
          echo "preview-sha=$BRANCH_SHA" >> $GITHUB_OUTPUT

  get-preview-state:
    name: Get preview state
    runs-on: ubuntu-latest
    outputs:
      preview-url: ${{ steps.preview-url.outputs.preview_url }}
      pg-connection-string: ${{ steps.preview-database.outputs.connection-string}}
    steps:
      - name: Find preview deployment comment
        uses: peter-evans/find-comment@v2
        if: success() && github.event.number
        id: preview-comment
        with:
          issue-number: ${{ github.event.number }}
          body-includes: <!-- __PREVIEW_DEPLOYMENT__ -->

      - name: Get current preview url
        id: preview-url
        run: |
          REGEX="(__PREVIEW_URL: )(.*)( -->)"          
          COMMENT_BODY="${{ steps.preview-comment.outputs.comment-body }}"

          if [[ $COMMENT_BODY =~ $REGEX ]]; then
              echo "preview_url=${BASH_REMATCH[1]}" >> $GITHUB_OUTPUT
          fi

      - name: Get current preview database
        id: preview-database
        run: |
          REGEX="__DATABASE_CONNECTION_STRING: (.*) -->"
          COMMENT_BODY="${{ steps.preview-comment.outputs.comment-body }}"

          if [[ $COMMENT_BODY =~ $REGEX ]]; then
              echo "connection-string=${BASH_REMATCH[1]}" >> $GITHUB_OUTPUT
          fi

      - name: Create or update preview environment comment
        uses: peter-evans/create-or-update-comment@v2
        with:
          comment-id: ${{ steps.preview-comment.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          edit-mode: replace
          body: |
            ## üèóÔ∏è Building preview environment...
            <!-- __PREVIEW_DEPLOYMENT__ -->

  preview-database:
    runs-on: ubuntu-latest
    needs:
      - get-preview-state
      - generate-preview-url
    outputs:
      connection-string: ${{ steps.connection-string.outputs.url }}
    env:
      BRANCH_NAME: ${{ needs.generate-preview-url.outputs.preview-hash }}
    steps:
      - uses: actions/checkout@v3
      - uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Check if Database exists
        id: check-database
        run: |
          FLY_APPS=$(flyctl apps list)
          PREVIEW_HASH=${{ needs.generate-preview-url.outputs.preview-hash }}

          if [[ $FLY_APPS =~ $PREVIEW_HASH ]]; then
              echo "database-exists=true" >> $GITHUB_OUTPUT
          fi

      # - name: TEST1
      #   if: always() && needs.get-preview-state.outputs.pg-connection-string
      #   run: echo "EXISTS[${{ needs.get-preview-state.outputs.pg-connection-string }}]EXISTS"

      # - name: TEST2
      #   if: always() && !needs.get-preview-state.outputs.pg-connection-string
      #   run: echo "EXISTS[${{ needs.get-preview-state.outputs.pg-connection-string }}]EXISTS"

      - name: Delete database if needed
        if: steps.check-database.outputs.database-exists && !needs.get-preview-state.outputs.pg-connection-string
        run: flyctl apps destroy ${{ needs.generate-preview-url.outputs.preview-hash }} --yes

      - name: Create database
        id: create-database
        if: always() && !steps.check-database.outputs.database-exists && !needs.get-preview-state.outputs.pg-connection-string
        run: |
          PG_CREATE_COMMAND="
              flyctl postgres create \
              --name $BRANCH_NAME \
              --org product-brew \
              --region waw \
              --vm-size shared-cpu-1x - 256 \
              --initial-cluster-size 1 \
              --volume-size 1 \
              --image-ref flyio/postgres:14
            "

          PG_CREATE_OUTPUT=$($PG_CREATE_COMMAND)
          REGEX="Connection string: (.*) Save"

          if [[ $(echo $PG_CREATE_OUTPUT) =~ $REGEX ]]; then
            INTERNAL_CONNECTION_STRING=${BASH_REMATCH[1]}            
          else
            echo "OPS problem"
            exit 1
          fi

          flyctl ips allocate-v4 --app $BRANCH_NAME

          sed "s/__APP_NAME_TEMPLATE__/$BRANCH_NAME/g" fly_postgres_template.toml > fly.toml

          flyctl deploy \
            --app $BRANCH_NAME \
            --image flyio/postgres:14 \
            --auto-confirm

          CONNECTION_STRING=$(echo $INTERNAL_CONNECTION_STRING | sed "s/.internal:/.fly.dev:/g") | base64

          echo "url=${CONNECTION_STRING}" >> $GITHUB_OUTPUT

      - name: format connection-string
        run: |
          if [[ "${{ needs.get-preview-state.outputs.pg-connection-string }}" ]]; then
            echo esa
          elif [[ "${{ steps.create-database.outputs.url }}" ]]; then
            echo elo        
          else
            echo ERROOOORRRRR
            exit 1
          fi
      # - name: Alocate IP
      #   if: always() && !steps.check-database.outputs.database-exists && !needs.get-preview-state.outputs.url
      #   run: flyctl ips allocate-v4 --app $BRANCH_NAME

      # - name: Generate Fly config
      #   if: always() && !steps.check-database.outputs.database-exists && !needs.get-preview-state.outputs.url
      #   run: sed "s/__APP_NAME_TEMPLATE__/$BRANCH_NAME/g" fly_postgres_template.toml > fly.toml

      # - name: Deploy updated database
      #   if: always() && !steps.check-database.outputs.database-exists && !needs.get-preview-state.outputs.url
      #   run: |
      #     flyctl deploy \
      #       --app $BRANCH_NAME \
      #       --image flyio/postgres:14 \
      #       --auto-confirm

      # - name: Format Connection string
      #   if: always() && !steps.check-database.outputs.database-exists && !needs.get-preview-state.outputs.url
      #   id: connection-string
      #   run: |
      #     CONNECTION_STRING=$(echo ${{ steps.create-database.outputs.pg-connection-string }} | sed "s/.internal:/.fly.dev:/g")

      #     echo $CONNECTION_STRING | base64
      #     echo "url=${CONNECTION_STRING}" >> $GITHUB_OUTPUT

  # deploy-preview:
  #   name: Deploy preview environment
  #   runs-on: ubuntu-latest
  #   outputs:
  #     url: ${{ steps.deploy.outputs.url }}
  #   steps:
  #     - uses: actions/checkout@v3

  #     - uses: pnpm/action-setup@v2
  #       name: Install pnpm
  #       id: pnpm-install
  #       with:
  #         version: 7
  #         run_install: false

  #     - name: Get pnpm store directory
  #       id: pnpm-cache
  #       shell: bash
  #       run: |
  #         echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

  #     - uses: actions/cache@v3
  #       name: Setup pnpm cache
  #       with:
  #         path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
  #         key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
  #         restore-keys: |
  #           ${{ runner.os }}-pnpm-store-

  #     - name: Install Vercel CLI
  #       run: pnpm add vercel@latest --global

  #     - name: Pull Vercel Preview  Environment Information
  #       run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

  #     - name: Replace Environment Variables
  #       run: |
  #         # WIP!
  #         sed -i '/^NEXT_PUBLIC_ALL_ENV=/s/=.*/="33213123!"/' .vercel/.env.preview.local

  #     - name: Build Project Artifacts
  #       run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

  #     - name: Deploy Project Artifacts to Vercel
  #       id: deploy
  #       run: |
  #         DOMAIN=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
  #         echo "url=${DOMAIN}" >> $GITHUB_OUTPUT

  # alias-preview:
  #   name: Add environment URL alias
  #   runs-on: ubuntu-latest
  #   needs:
  #     - deploy-preview
  #     - generate-preview-url
  #   steps:
  #     - name: Alias current deployment
  #       run: |
  #         vercel alias \
  #           ${{ needs.deploy-preview.outputs.url }} \
  #           ${{ needs.generate-preview-url.outputs.preview-hash }}.vercel.app \
  #           --token=${{ secrets.VERCEL_TOKEN }}

  # remove-old-preview:
  #   name: Remove old environment
  #   runs-on: ubuntu-latest
  #   needs:
  #     - alias-preview
  #     - get-preview-state
  #   steps:
  #     - name: Remove previous preview environment
  #       run: |
  #         VERCEL_PREVIEW_URL="${{ needs.get-preview-state.outputs.url }}"

  #         if [ $VERCEL_PREVIEW_URL ]; then
  #             vercel remove $VERCEL_PREVIEW_URL --yes --token=${{ secrets.VERCEL_TOKEN }}
  #         else
  #             echo "No previous Preview Environment"
  #         fi

  # update-deployment-comment:
  #   name: Update preview state
  #   runs-on: ubuntu-latest
  #   needs:
  #     # - alias-preview
  #     - generate-preview-url
  #     - create-database
  #     - get-preview-state
  #   steps:
  #     - name: Find preview environment comment to update
  #       uses: peter-evans/find-comment@v2
  #       if: success() && github.event.number
  #       id: preview-comment
  #       with:
  #         issue-number: ${{ github.event.number }}
  #         body-includes: <!-- __VERCEL_DEPLOYMENT__ -->

  #     - name: Create or update preview link comment
  #       uses: peter-evans/create-or-update-comment@v2
  #       with:
  #         comment-id: ${{ steps.preview-comment.outputs.comment-id }}
  #         issue-number: ${{ github.event.pull_request.number }}
  #         edit-mode: replace
  #         body: |
  #           ## [üöÄ Your preview environment is ready!](https://${{ needs.generate-preview-url.outputs.preview-hash }}.vercel.app)

  #           <!-- __PREVIEW_DEPLOYMENT__ -->
  #           # <!-- __PREVIEW_URL:: ${{ steps.vercel-preview.outputs.VERCEL_PREVIEW_URL }} -->
  #           <!-- __DATABASE_CONNECTION_STRING:: ${{ steps.vercel-preview.outputs.VERCEL_PREVIEW_URL }} -->
